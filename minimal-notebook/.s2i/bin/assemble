#!/bin/bash

set -eo pipefail

########################################################################
# INFO: Install everything that's required for Jupyter notebooks here.
########################################################################

# Ensure we are using the latest pip and wheel packages.

pip install -U pip setuptools wheel

# Install mod_wsgi for use in optional webdav support.

pip install 'mod_wsgi==4.6.5'

# Install base packages needed for running Jupyter Notebooks. 
pip install -r /tmp/src/requirements.txt

#if hash python3 2>/dev/null; then
#    # Activate JupyterHub extension for JupyterLab.
#    # The hub extension install fails for python2
    jupyter labextension install @jupyterlab/hub-extension
    npm cache clean --force
    rm -rf $HOME/.cache/yarn
    rm -rf $HOME/.node-gyp
#fi

# Copy into place default config files for Jupyter and Apache webdav.

cp /tmp/src/jupyter_notebook_config.py /opt/app-root/etc/
cp /tmp/src/jupyter_kernel_gateway_config.py /opt/app-root/etc/
cp /tmp/src/httpd-webdav.conf /opt/app-root/etc/

# This S2I assemble script is only used when creating the custom image.
# For when running the image, or using it as a S2I builder, we use a second
# set of custom S2I scripts. We now need to move these into the correct
# location and have the custom image use those by dropping in an image
# meta file which overrides the labels of the base image.

mkdir -p /tmp/.s2i
mv /tmp/src/builder/image_metadata.json /tmp/.s2i/image_metadata.json
mv /tmp/src/builder /opt/app-root/builder
mv /tmp/src/*.sh /opt/app-root/bin

# Ensure passwd/group file intercept happens for any shell environment.

echo "source /opt/app-root/etc/generate_container_user" >> /opt/app-root/etc/scl_enable

# Set home and install supervisor

HOME=/opt/app-root
pip install --no-cache-dir supervisor==4.0.*

# Remove the per user Python area and cache as shouldn't need them now.

rm -rf /opt/app-root/.local /opt/app-root/.cache

# Generate default supervisord.conf file.

mkdir /opt/app-root/supervisor
echo_supervisord_conf | \
    sed -e 's%^logfile=/tmp/supervisord.log%logfile=/dev/fd/1%' \
        -e 's%^logfile_maxbytes=50MB%logfile_maxbytes=0%' > \
        /opt/app-root/supervisor/supervisord.conf

cat >> /opt/app-root/supervisor/supervisord.conf << EOF

[program:notebook]
process_name=notebook
command=start-notebook.sh
stdout_logfile=/proc/1/fd/1
stdout_logfile_maxbytes=0
redirect_stderr=true
autostart=true
autorestart=true
exitcodes=0

[eventlistener:notebook_exit]
command=stop-supervisord.sh
process_name=notebook
events=PROCESS_STATE_EXITED

[program:webdav]
process_name=webdav
command=start-webdav.sh
stdout_logfile=/proc/1/fd/1
stdout_logfile_maxbytes=0
redirect_stderr=true
autostart=%(ENV_JUPYTER_ENABLE_WEBDAV)s

[include]
files = /opt/app-root/src/.supervisord/*.conf
EOF

# Make sure the S2I source directory is empty as we will use the image
# produced to run further S2I builds.

rm -rf /tmp/src

# Fixup permissions on directories and files.

fix-permissions /opt/app-root
